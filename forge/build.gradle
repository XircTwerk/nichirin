plugins {
    id 'com.github.johnrengelman.shadow'
}

loom {
    forge {
        mixinConfig "nichirin.mixins.json"
    }
}

architectury {
    platformSetupLoomIde()
    forge()
}

// Add generated resources to source sets
sourceSets {
    main {
        resources {
            srcDirs += ["src/generated/resources"]
        }
    }
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    forge "net.minecraftforge:forge:$rootProject.forge_version"

    // Architectury API. This is optional, and you can comment it out if you don't need it.
    modImplementation "dev.architectury:architectury-forge:$rootProject.architectury_api_version"

    compileOnly(annotationProcessor("io.github.llamalad7:mixinextras-common:0.3.5"))
    implementation(include("io.github.llamalad7:mixinextras-forge:0.3.5"))

    modApi("me.shedaniel.cloth:cloth-config-forge:11.1.118"){ transitive = false }

    // Terrablender
    modImplementation("com.github.glitchfiend:TerraBlender-forge:${minecraft_version}-${terrablender_version}")

    modImplementation("dev.kosmx.player-anim:player-animation-lib-forge:${player_anim_version}")

    implementation "mod.azure.azurelib:azurelib-forge-1.20.1:1.0.34"

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionForge')
}

processResources {
    inputs.property 'version', project.version

    filesMatching('META-INF/mods.toml') {
        expand version: project.version
    }
}

shadowJar {
    // Add these excludes
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}


remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
}

// Copy datagen from Fabric since Architectury Loom doesn't support Forge datagen well
task copyDatagenFromFabric(type: Copy) {
    dependsOn ':fabric:runDatagen'

    from("${project(':fabric').projectDir}/src/generated/resources") {
        include '**/*.json'
    }
    into("${projectDir}/src/generated/resources")

    doFirst {
        println "Copying datagen files from Fabric to Forge..."
    }

    doLast {
        println "Datagen files copied successfully!"
    }
}